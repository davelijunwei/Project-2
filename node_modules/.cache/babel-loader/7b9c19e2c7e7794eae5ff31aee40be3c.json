{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/dave/Desktop/iwatch/src/components/Chart.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport { createChart } from 'lightweight-charts';\nimport axios from 'axios';\nimport './Chart.css';\n\nconst Chart = ({\n  stockQuote\n}) => {\n  _s();\n\n  const [chartData, setChartData] = useState([]);\n  const chartRef = useRef();\n  useEffect(() => {\n    (async () => {\n      const chartData = await axios(`https://finnhub.io/api/v1/stock/candle?symbol=${stockQuote}&resolution=D&from=1451606400&to=1597288773&token=bugfiof48v6s5hg5c190`);\n      setChartData(chartData.data);\n      let dates = chartData.data.t;\n      let price = chartData.data.c;\n      let months_arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\n      function getDate(dates) {\n        let arr = [];\n\n        for (let i = 0; i < dates.length; i++) {\n          let date = new Date(dates[i] * 1000);\n          let year = date.getFullYear();\n          let month = months_arr[date.getMonth()];\n          let day = date.getDate();\n          arr.push(year + \"-\" + month + \"-\" + day);\n        }\n\n        return arr;\n      }\n\n      let datesList = getDate(dates);\n\n      const stockChartData = function (date, price) {\n        let newArr = [];\n\n        for (let i = 0; i < date.length; i++) {\n          newArr.push({\n            time: date[i],\n            value: price[i]\n          });\n        }\n\n        return newArr;\n      };\n\n      let stockChartDatas = stockChartData(datesList, price);\n      const chart = createChart(chartRef.current, {\n        width: 400,\n        height: 300\n      });\n      const lineSeries = chart.addLineSeries();\n      lineSeries.setData(stockChartDatas);\n      chart.timeScale().fitContent();\n    })();\n  }, [stockQuote]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 17\n  }, this);\n};\n\n_s(Chart, \"MWCjEwxyaDr6sMWQjKgXLq61vkQ=\");\n\n_c = Chart;\nexport default Chart; //check table head \n//table = written as thead inside thead is row tr each greenbox is tr \n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/dave/Desktop/iwatch/src/components/Chart.jsx"],"names":["React","useEffect","useState","useRef","createChart","axios","Chart","stockQuote","chartData","setChartData","chartRef","data","dates","t","price","c","months_arr","getDate","arr","i","length","date","Date","year","getFullYear","month","getMonth","day","push","datesList","stockChartData","newArr","time","value","stockChartDatas","chart","current","width","height","lineSeries","addLineSeries","setData","timeScale","fitContent"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { createChart } from 'lightweight-charts';\nimport axios from 'axios';\nimport './Chart.css';\n\nconst Chart = ({stockQuote}) => {\n    const [chartData, setChartData] = useState([]);\n    const chartRef = useRef();\n\n    useEffect(() => {\n        (async () => {\n          const chartData = await axios(\n            `https://finnhub.io/api/v1/stock/candle?symbol=${stockQuote}&resolution=D&from=1451606400&to=1597288773&token=bugfiof48v6s5hg5c190`\n            \n          );\n          setChartData(chartData.data);\n          let dates = chartData.data.t\n          let price = chartData.data.c;\n          let months_arr = [1,2,3,4,5,6,7,8,9,10,11,12];\n\n          function getDate(dates){\n              let arr = [];   \n              for( let i=0; i < dates.length; i++){  \n                  let date = new Date(dates[i]*1000);\n                  let year = date.getFullYear();\n                  let month = months_arr[date.getMonth()];\n                  let day = date.getDate();\n                  arr.push(year + \"-\" + month + \"-\" + day)\n              }\n              return arr;\n          }\n        \n          let datesList = getDate(dates);\n      \n          const stockChartData = function(date, price){\n              let newArr = [];\n              for ( let i = 0; i < date.length; i++){\n              newArr.push({time: date[i], value : price[i]});\n          }\n              return newArr;\n          }\n        \n          let stockChartDatas = stockChartData(datesList,price);\n      \n          const chart = createChart(chartRef.current, { width: 400, height: 300 });\n          const lineSeries = chart.addLineSeries();\n          lineSeries.setData(stockChartDatas);\n          chart.timeScale().fitContent();\n\n        })();\n    },[stockQuote]);\n\n        return (\n                <div className=\"chart-container\">\n                    <div ref={chartRef} />\n                </div>              \n        )\n}\nexport default Chart;\n\n\n//check table head \n//table = written as thead inside thead is row tr each greenbox is tr "]},"metadata":{},"sourceType":"module"}